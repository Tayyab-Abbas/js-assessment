{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'TodoList',\n  data() {\n    return {\n      items: [],\n      tableSize: 0,\n      page: 1,\n      lastPage: null,\n      fields: [{\n        key: 'description',\n        label: 'Description',\n        sortable: false,\n        sortDirection: 'desc'\n      }, {\n        key: 'title',\n        label: 'Title',\n        sortable: false,\n        class: 'text-center'\n      }, {\n        key: 'actions',\n        label: 'Actions'\n      }],\n      totalRows: 1,\n      filter: null,\n      filterOn: [],\n      infoModal: {\n        id: 'info-modal',\n        title: '',\n        content: ''\n      }\n    };\n  },\n  computed: {},\n  mounted() {\n    let tokenAvailable = window.localStorage.getItem('accessToken');\n    this.tokenAvailable = tokenAvailable;\n    this.totalRows = this.items.length;\n    this.getData();\n    window.addEventListener(\"scroll\", this.onScroll);\n  },\n  destroyed() {\n    window.removeEventListener(\"scroll\", this.onScroll);\n  },\n  methods: {\n    onScroll(el) {\n      if (el.target.offsetHeight + el.target.scrollTop >= el.target.scrollHeight) {\n        this.getMoreData();\n      }\n    },\n    getMoreData() {\n      this.page += 1;\n      if (this.page <= this.lastPage) {\n        this.getData();\n      }\n    },\n    getData() {\n      this.axios.get(`http://3.232.244.22/api/items?page=${this.page}`, {\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Authorization\": `Bearer ${this.tokenAvailable}`\n        }\n      }).then(response => {\n        console.log(response.data);\n        let tableData = response.data.items.data;\n        this.lastPage = response.data.items.last_page;\n        this.tableSize = tableData.length - 1;\n        if (tableData.length) {\n          for (this.tableSize; this.tableSize >= 0; this.tableSize--) {\n            this.items.push(tableData[this.tableSize]);\n          }\n        }\n      });\n    },\n    infoRow(item, index, button) {\n      console.log(\"dataIS\", item);\n      this.$router.push('/updatetodo/' + item.id);\n\n      // this.infoModal.title = `Row index: ${index}`\n      // this.infoModal.content = JSON.stringify(item, null, 2)\n      // this.$root.$emit('bv::show::modal', this.infoModal.id, button)\n    },\n\n    deleteRow(item, index, button) {\n      console.log(\"dataIS\", item);\n      this.axios.delete(`http://3.232.244.22/api/item/${item.id}`, {\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Authorization\": `Bearer ${this.tokenAvailable}`\n        }\n      }).then(response => {\n        console.log(response.data);\n        this.items = [];\n        this.page = 1;\n        this.getData();\n      });\n\n      // this.infoModal.title = `Row index: ${index}`\n      // this.infoModal.content = JSON.stringify(item, null, 2)\n      // this.$root.$emit('bv::show::modal', this.infoModal.id, button)\n    },\n\n    // resetInfoModal() {\n    //   this.infoModal.title = ''\n    //   this.infoModal.content = ''\n    // },\n    createRow() {\n      this.$router.push('/createtodo');\n    },\n    onFiltered(filteredItems) {\n      this.totalRows = filteredItems.length;\n    }\n  }\n};","map":{"version":3,"mappings":";AAiGA;EAEAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC,SACA;QAAAC;QAAAC;QAAAC;QAAAC;MAAA,GACA;QAAAH;QAAAC;QAAAC;QAAAE;MAAA,GACA;QAAAJ;QAAAC;MAAA,EAEA;MACAI;MAGAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC,WACA;EACAC;IACA;IACA;IACA;IACA;IACAC;EAEA;EACAC;IACAD;EACA;EACAE;IACAC;MAEA;QAEA;MAGA;IACA;IACAC;MACA;MACA;QACA;MACA;IAEA;IACAC;MAEA;QAAAC;UAAA;UAAA;QAAA;MAAA;QACAC;QACA;QACA;QACA;QACA;UACA;YACA;UACA;QACA;MACA;IACA;IACAC;MAEAD;MACA;;MAEA;MACA;MACA;IAEA;;IACAE;MACAF;MACA;QAAAD;UAAA;UAAA;QAAA;MAAA;QACAC;QACA;QACA;QACA;MACA;;MAEA;MACA;MACA;IAEA;;IACA;IACA;IACA;IACA;IACAG;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","data","items","tableSize","page","lastPage","fields","key","label","sortable","sortDirection","class","totalRows","filter","filterOn","infoModal","id","title","content","computed","mounted","window","destroyed","methods","onScroll","getMoreData","getData","headers","console","infoRow","deleteRow","createRow","onFiltered"],"sourceRoot":"src/components","sources":["TodoList.vue"],"sourcesContent":["<template>\n  <div class=\"todoList\">\n    <div class=\"headTitle\" >\n      <h1 >Welcome To My TodoList</h1>\n    </div>\n    <template>\n  <b-container fluid >\n    <!-- User Interface controls -->\n    <b-row>\n\n      <b-col lg=\"4\" class=\"my-1 \">\n        <b-form-group\n          label=\"Filter\"\n          label-for=\"filter-input\"\n          label-cols-sm=\"3\"\n          label-align-sm=\"right\"\n          label-size=\"sm\"\n          class=\"mb-0\"\n        >\n          <b-input-group size=\"sm\">\n            <b-form-input\n              id=\"filter-input\"\n              v-model=\"filter\"\n              type=\"search\"\n              placeholder=\"Type to Search\"\n            ></b-form-input>\n\n            <b-input-group-append>\n              <b-button :disabled=\"!filter\" @click=\"filter = ''\">Clear</b-button>\n            </b-input-group-append>\n          </b-input-group>\n        </b-form-group>\n      </b-col>\n\n      <b-col lg=\"4\" class=\"my-1 \">\n        <b-form-group\n          v-model=\"sortDirection\"\n          label=\"Filter On\"\n          label-cols-sm=\"3\"\n          label-align-sm=\"right\"\n          label-size=\"sm\"\n          class=\"mb-0\"\n          \n        >\n          <b-form-checkbox-group\n            v-model=\"filterOn\"\n            class=\"mt-1\"\n          >\n            <b-form-checkbox value=\"description\" ><span class=\"txt-check\">Description</span></b-form-checkbox>\n            <b-form-checkbox value=\"title\"><span class=\"txt-check\">Title</span></b-form-checkbox>\n          </b-form-checkbox-group>\n        </b-form-group>\n      </b-col>\n      <b-col lg=\"4\" class=\"my-1 itemCl\">\n        <b-button size=\"sm\" @click=\"createRow\" class=\"clearbtn\">\n           Create Todo\n        </b-button>\n      </b-col>\n    </b-row>\n<div style=\"height: 640px; \noverflow-y: scroll !important; background-color: white;\"  v-on:scroll.capture=\"onScroll\">\n    <b-table\n      :items=\"items\"\n      :fields=\"fields\"\n      :filter=\"filter\"\n      :filter-included-fields=\"filterOn\"\n      show-empty\n      small\n      hover\n      @filtered=\"onFiltered\"\n    >\n      <template #cell(description)=\"row\">\n        {{ row.item.description}}\n      </template>\n\n      <template #cell(actions)=\"row\" >\n       <div class=\"btnTable\">\n        <b-button size=\"sm\" @click=\"infoRow(row.item, row.index, $event.target)\" class=\"mr-1 tableBtn tableBtn1\">\n          View/Update\n        </b-button>\n        <b-button size=\"sm\" @click=\"deleteRow(row.item, row.index, $event.target)\" class=\"tableBtn tableBtn2\">\n           Delete\n        </b-button>\n       </div>\n      </template>\n    </b-table>\n  </div>\n    <!-- Info modal -->\n    <!-- <b-modal :id=\"infoModal.id\" :title=\"infoModal.title\" ok-only @hide=\"resetInfoModal\">\n      <pre>{{ infoModal.content }}</pre>\n    </b-modal> -->\n  </b-container>\n</template>\n  </div>\n</template>\n\n<script>\nexport default {\n  \n  name: 'TodoList',\n  data(){\n    return {\n        items: [],\n        tableSize:0,\n        page:1,\n        lastPage:null,\n        fields: [\n          { key: 'description', label: 'Description', sortable: false, sortDirection: 'desc' },\n          { key: 'title', label: 'Title', sortable: false, class: 'text-center' },\n          { key: 'actions', label: 'Actions' },\n          \n        ],\n        totalRows: 1,\n\n\n        filter: null,\n        filterOn: [],\n        infoModal: {\n          id: 'info-modal',\n          title: '',\n          content: ''\n        }\n      }\n},\ncomputed: {\n    },\n    mounted(){\n            let tokenAvailable=window.localStorage.getItem('accessToken');\n            this.tokenAvailable = tokenAvailable;\n            this.totalRows = this.items.length;\n            this.getData();\n            window.addEventListener(\"scroll\",   this.onScroll );\n            \n          },\n          destroyed() {\n    window.removeEventListener(\"scroll\",   this.onScroll );\n  },\n    methods: {\n      onScroll (el) {\n\n\t\t\tif ((el.target.offsetHeight + el.target.scrollTop) >= el.target.scrollHeight) {\n        \n        this.getMoreData();\n                \n            \n}\n    },\n    getMoreData(){\n      this.page+=1;\n      if(this.page<=this.lastPage){\n        this.getData(); \n      }\n       \n      },\n      getData(){\n        \n        this.axios.get(`http://3.232.244.22/api/items?page=${this.page}`,{headers: {\"Content-type\": \"application/json\",\"Authorization\": `Bearer ${this.tokenAvailable}`}}).then((response) => {\n                console.log(response.data);\n                let tableData=response.data.items.data;\n                this.lastPage=response.data.items.last_page;\n                this.tableSize=tableData.length-1;\n                if(tableData.length){\n                for(this.tableSize;this.tableSize>=0 ;this.tableSize--){\n                  this.items.push(tableData[this.tableSize]);\n                }\n                } \n              })\n      },\n      infoRow(item, index, button) {\n        \n        console.log(\"dataIS\",item)\n        this.$router.push('/updatetodo/'+ item.id );\n\n        // this.infoModal.title = `Row index: ${index}`\n        // this.infoModal.content = JSON.stringify(item, null, 2)\n        // this.$root.$emit('bv::show::modal', this.infoModal.id, button)\n\n      },\n      deleteRow(item, index, button) {\n        console.log(\"dataIS\",item)\n        this.axios.delete(`http://3.232.244.22/api/item/${item.id}`,{headers: {\"Content-type\": \"application/json\",\"Authorization\": `Bearer ${this.tokenAvailable}`}}).then((response) => {\n        console.log(response.data);\n        this.items=[];\n        this.page=1;\n        this.getData();        \n        })\n\n      // this.infoModal.title = `Row index: ${index}`\n      // this.infoModal.content = JSON.stringify(item, null, 2)\n      // this.$root.$emit('bv::show::modal', this.infoModal.id, button)\n\n      },\n      // resetInfoModal() {\n      //   this.infoModal.title = ''\n      //   this.infoModal.content = ''\n      // },\n      createRow() {\n        this.$router.push('/createtodo');\n      },\n      onFiltered(filteredItems) {\n        this.totalRows = filteredItems.length\n      }\n    },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, email, sameAs, minLength } from \"vuelidate/lib/validators\";\nimport '../styles/global.css';\nexport default {\n  name: 'RegisterScreen',\n  data() {\n    return {\n      contacts: {\n        email: \"\",\n        password: \"\",\n        password_confirmation: \"\"\n      },\n      isValid: false,\n      infoModal: {\n        id: 'info-modal',\n        title: ''\n      },\n      toasterHit: false\n    };\n  },\n  validations: {\n    contacts: {\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(8)\n      },\n      password_confirmation: {\n        required,\n        sameAsPassword: sameAs('password')\n      }\n    }\n  },\n  methods: {\n    onRegister() {\n      this.axios.post('http://3.232.244.22/api/register', this.contacts).then(response => {\n        console.log(response.data);\n        if (response.data.success == true) {\n          this.toasterHit = true;\n          this.infoModal.title = \"Check email please\";\n          this.$root.$emit('bv::show::modal', this.infoModal.id, this.infoModal.title);\n        }\n      }).catch(err => {\n        console.log(err);\n        window.localStorage.setItem('accessToken', 'null');\n        this.infoModal.title = \"The email has already been taken.\";\n        this.$root.$emit('bv::show::modal', this.infoModal.id, this.infoModal.title);\n        this.toasterHit = false;\n      });\n    },\n    onFormSubmit() {\n      this.isValid = true;\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      /* eslint-disable */\n      this.onRegister();\n    },\n    loginUser() {\n      this.$router.push('/login');\n    },\n    resetInfoModal() {\n      debugger;\n      this.infoModal.title = '';\n      if (this.toasterHit) {\n        this.loginUser();\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AA4DA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAT;MACAC;QACAS;QACAT;MACA;MACAC;QACAQ;QACAC;MACA;MACAR;QACAO;QACAE;MACA;IACA;EACA;EACAC;IACAC;MACA;QACAC;QACA;UACA;UACA;UACA;QACA;MACA;QACAA;QACAC;QACA;QACA;QACA;MAEA;IAEA;IACAC;MACA;MAEA;MACA;QACA;MACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MAEA;MACA;QACA;MAAA;IACA;EACA;AACA","names":["name","data","contacts","email","password","password_confirmation","isValid","infoModal","id","title","toasterHit","validations","required","minLength","sameAsPassword","methods","onRegister","console","window","onFormSubmit","loginUser","resetInfoModal"],"sourceRoot":"src/components","sources":["RegisterScreen.vue"],"sourcesContent":["\n  <template>\n    <div class=\"container\">\n    <div class=\"loginScreen\">\n    <div class=\"login-body\">\n      <div class=\"card-cover\">\n        <form @submit.prevent=\"onFormSubmit\">\n          <div class=\"Screen-card p-4 p-sm-3 \">\n          <div class=\"head-title\">\n                <h2>Register</h2>\n              </div>\n            <div class=\"form-group\">\n                <label>Email</label>\n                <input type=\"email\" v-model=\"contacts.email\" id=\"email\" name=\"email\" class=\"form-control\"\n                    :class=\"{ 'is-invalid': isValid && $v.contacts.email.$error }\" />\n                \n                <div v-if=\"isValid && $v.contacts.email.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.email.required\">Email is required</span>\n                    <span v-if=\"!$v.contacts.email.email\">Email is not valid</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group\">\n                <label>Password</label>\n                <input type=\"password\" v-model=\"contacts.password\" id=\"password\" name=\"password\" class=\"form-control\"\n                    :class=\"{ 'is-invalid': isValid && $v.contacts.password.$error }\" />\n                <div v-if=\"isValid && $v.contacts.password.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.password.required\">Password field is required</span>\n                    <span v-if=\"!$v.contacts.password.minLength\">Maxium 8 characters allowed</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group\">\n                <label>Confirm Password</label>\n                <input type=\"password\" v-model=\"contacts.password_confirmation\" id=\"password_confirmation\" name=\"password_confirmation\"\n                    class=\"form-control\" :class=\"{ 'is-invalid': isValid && $v.contacts.password_confirmation.$error }\" />\n                <div v-if=\"isValid && $v.contacts.password_confirmation.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.password_confirmation.required\">Confirm Password field is required</span>\n                    <span v-else-if=\"!$v.contacts.password_confirmation.sameAsPassword\">Passwords should be matched</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group card-button\">\n                <button class=\"btn btn-primary btn-block submit-button\">Submit</button>\n            </div>\n              <div class=\"screen-Link\">\n                <p>Already have an account? <span role=\"button\" @click=\"loginUser\">Login</span></p>\n              </div>\n          <b-modal :id=\"infoModal.id\" :title=\"infoModal.title\" ok-only ok-variant='danger'  @hide=\"resetInfoModal\">\n          <pre>{{infoModal.title}}</pre>\n          </b-modal>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n    </div>\n  </template>\n  \n  <script>\n    import { required, email, sameAs, minLength } from \"vuelidate/lib/validators\";\n    import '../styles/global.css'\n  \n    export default {\n      name: 'RegisterScreen',\n        data() {\n            return {\n                contacts: {\n                    email: \"\",\n                    password: \"\",\n                    password_confirmation: \"\"\n                },\n                isValid: false,\n              infoModal: {\n              id: 'info-modal',\n              title: '',\n              },\n              toasterHit:false,\n            };\n        },\n        validations: {\n            contacts: {\n                email: {\n                    required,\n                    email\n                },\n                password: {\n                    required,\n                    minLength: minLength(8)\n                },\n                password_confirmation: {\n                    required,\n                    sameAsPassword: sameAs('password')\n                }\n            }\n        },\n        methods: {\n            onRegister(){\n                this.axios.post('http://3.232.244.22/api/register', this.contacts).then((response) => {\n                    console.log(response.data);\n                    if(response.data.success==true){\n                    this.toasterHit=true;\n                    this.infoModal.title=\"Check email please\";\n                    this.$root.$emit('bv::show::modal', this.infoModal.id, this.infoModal.title);\n                    } \n                }).catch(err => {\n              console.log(err);\n              window.localStorage.setItem('accessToken', 'null');\n              this.infoModal.title=\"The email has already been taken.\";\n              this.$root.$emit('bv::show::modal', this.infoModal.id, this.infoModal.title);\n              this.toasterHit=false;\n             \n              })\n\n            },\n            onFormSubmit() {              \n                this.isValid = true;\n  \n                this.$v.$touch();\n                if (this.$v.$invalid) {\n                    return;\n                }\n                /* eslint-disable */\n                this.onRegister();  \n            },\n            loginUser(){\n              this.$router.push('/login');\n            },\n            resetInfoModal() {\n                debugger;\n                \n            this.infoModal.title = ''\n            if(this.toasterHit){\n                this.loginUser()}\n            },\n        },\n    };\n  </script>\n  \n  \n  <style lang=\"css\">\n    .container {\n        max-width: 500px !important; \n        text-align: left;\n        margin: 0 auto;\n    }\n    label {\n        font-weight: 600;\n    }\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { required, email, sameAs, minLength } from \"vuelidate/lib/validators\";\nexport default {\n  name: 'RegisterScreen',\n  data() {\n    return {\n      contacts: {\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      isValid: false\n    };\n  },\n  validations: {\n    contacts: {\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(8)\n      },\n      confirmPassword: {\n        required,\n        sameAsPassword: sameAs('password')\n      }\n    }\n  },\n  methods: {\n    onFormSubmit() {\n      this.isValid = true;\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      this.axios.post('http://localhost:8888/contacts', this.contacts).then(response => {\n        this.resetForm();\n        console.log(response.data);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAgDA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAL;MACAC;QACAK;QACAL;MACA;MACAC;QACAI;QACAC;MACA;MACAJ;QACAG;QACAE;MACA;IACA;EACA;EACAC;IACAC;MACA;MAEA;MACA;QACA;MACA;MAEA;QACA;QACAC;MACA;IACA;EACA;AACA","names":["name","data","contacts","email","password","confirmPassword","isValid","validations","required","minLength","sameAsPassword","methods","onFormSubmit","console"],"sourceRoot":"src/components","sources":["RegisterScreen.vue"],"sourcesContent":["\n  <template>\n    <div class=\"container\">\n  \n        <h2 class=\"mt-5 mb-5 text-center\">Register Screen</h2>\n  \n        <form @submit.prevent=\"onFormSubmit\">\n  \n            <div class=\"form-group\">\n                <label>Email</label>\n                <input type=\"email\" v-model=\"contacts.email\" id=\"email\" name=\"email\" class=\"form-control\"\n                    :class=\"{ 'is-invalid': isValid && $v.contacts.email.$error }\" />\n                \n                <div v-if=\"isValid && $v.contacts.email.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.email.required\">Email is required</span>\n                    <span v-if=\"!$v.contacts.email.email\">Email is not valid</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group\">\n                <label>Password</label>\n                <input type=\"password\" v-model=\"contacts.password\" id=\"password\" name=\"password\" class=\"form-control\"\n                    :class=\"{ 'is-invalid': isValid && $v.contacts.password.$error }\" />\n                <div v-if=\"isValid && $v.contacts.password.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.password.required\">Password field is required</span>\n                    <span v-if=\"!$v.contacts.password.minLength\">Maxium 6 characters allowed</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group\">\n                <label>Confirm Password</label>\n                <input type=\"password\" v-model=\"contacts.confirmPassword\" id=\"confirmPassword\" name=\"confirmPassword\"\n                    class=\"form-control\" :class=\"{ 'is-invalid': isValid && $v.contacts.confirmPassword.$error }\" />\n                <div v-if=\"isValid && $v.contacts.confirmPassword.$error\" class=\"invalid-feedback\">\n                    <span v-if=\"!$v.contacts.confirmPassword.required\">Confirm Password field is required</span>\n                    <span v-else-if=\"!$v.contacts.confirmPassword.sameAsPassword\">Passwords should be matched</span>\n                </div>\n            </div>\n  \n            <div class=\"form-group\">\n                <button class=\"btn btn-primary btn-block\">Submit</button>\n            </div>\n        </form>\n        \n    </div>\n  </template>\n  \n  <script>\n    import { required, email, sameAs, minLength } from \"vuelidate/lib/validators\";\n  \n    export default {\n      name: 'RegisterScreen',\n        data() {\n            return {\n                contacts: {\n                    email: \"\",\n                    password: \"\",\n                    confirmPassword: \"\"\n                },\n                isValid: false\n            };\n        },\n        validations: {\n            contacts: {\n                email: {\n                    required,\n                    email\n                },\n                password: {\n                    required,\n                    minLength: minLength(8)\n                },\n                confirmPassword: {\n                    required,\n                    sameAsPassword: sameAs('password')\n                }\n            }\n        },\n        methods: {\n            onFormSubmit() {              \n                this.isValid = true;\n  \n                this.$v.$touch();\n                if (this.$v.$invalid) {\n                    return;\n                }\n  \n                this.axios.post('http://localhost:8888/contacts', this.contacts).then((response) => {\n                    this.resetForm();\n                    console.log(response.data);\n                })\n            }\n        },\n    };\n  </script>\n  \n  \n  <style lang=\"css\">\n    .container {\n        max-width: 500px !important; \n        text-align: left;\n        margin: 0 auto;\n    }\n    label {\n        font-weight: 600;\n    }\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required } from \"vuelidate/lib/validators\";\nexport default {\n  name: 'CreateTodoScreen',\n  data() {\n    return {\n      title: '',\n      description: '',\n      isValid: false,\n      tokenAvailable: \"\"\n    };\n  },\n  validations: {\n    title: {\n      required\n    },\n    description: {\n      required\n    }\n  },\n  methods: {\n    onFormSubmit() {\n      this.isValid = true;\n      this.$router.push('/');\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      let object = {\n        title: this.title,\n        description: this.description\n      };\n      this.axios.post('http://3.232.244.22/api/item', object, {\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Authorization\": `Bearer ${this.tokenAvailable}`\n        }\n      }).then(response => {\n        //   this.resetForm();\n\n        console.log(response.data);\n      });\n    }\n  },\n  mounted() {\n    let tokenAvailable = window.localStorage.getItem('accessToken');\n    this.tokenAvailable = tokenAvailable;\n  }\n};","map":{"version":3,"mappings":";AAwCA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IAEAJ;MACAK;IACA;IACAJ;MACAI;IACA;EAGA;EACAC;IACAC;MACA;MACA;MACA;MACA;QACA;MACA;MAEA;QACAP;QACAC;MACA;MACA;QAAAO;UAAA;UAAA;QAAA;MAAA;QACA;;QAEAC;MACA;IACA;EACA;EACAC;IACA;IACA;EAEA;AACA","names":["name","data","title","description","isValid","tokenAvailable","validations","required","methods","onFormSubmit","headers","console","mounted"],"sourceRoot":"src/components","sources":["CreateTodoScreen.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n  <div class=\"loginScreen\">\n  <div class=\"login-body\">\n    <div class=\"card-cover\">\n      <form @submit.prevent=\"onFormSubmit\">\n        <div class=\"Screen-card p-4 p-sm-3 \">\n        <div class=\"head-title\">\n              <h2>Create Todo</h2>\n        </div>\n\n          <div class=\"form-group\">\n              <label>Title</label>\n              <input type=\"title\" v-model=\"title\" id=\"title\" name=\"title\" class=\"form-control\"\n                  :class=\"{ 'is-invalid': isValid && $v.title.$error }\" />\n              <div v-if=\"isValid && $v.title.$error\" class=\"invalid-feedback\">\n                  <span v-if=\"!$v.title.required\">Title field is required</span>\n              </div>\n          </div>\n          <div class=\"form-group\">\n              <label>Description</label>\n              <input type=\"description\" v-model=\"description\" id=\"description\" name=\"description\" class=\"form-control\"\n                  :class=\"{ 'is-invalid': isValid && $v.description.$error }\" />\n              <div v-if=\"isValid && $v.description.$error\" class=\"invalid-feedback\">\n                  <span v-if=\"!$v.description.required\">Description field is required</span>\n              </div>\n          </div>\n          <div class=\"form-group card-button\">\n              <button class=\"btn btn-primary btn-block submit-button\">Submit</button>\n          </div>\n          \n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n  </div>\n</template>\n\n<script>\nimport { required } from \"vuelidate/lib/validators\";\nexport default {\n  name: 'CreateTodoScreen',\n  data() {\n          return {\n              title:'',\n              description:'',\n              isValid:false,\n              tokenAvailable:\"\",\n          };\n      },\n      validations: {\n          \n        title: {\n                  required,\n              },\n        description: {\n                  required,\n              },\n              \n          \n      },\n      methods:{\n      onFormSubmit() {              \n              this.isValid = true;\n              this.$router.push('/');\n              this.$v.$touch();\n              if (this.$v.$invalid) {\n                  return;\n              }\n\n              let object={\n                title:this.title,\n                description:this.description,\n              }\n              this.axios.post('http://3.232.244.22/api/item', object ,{headers: {\"Content-type\": \"application/json\",\"Authorization\": `Bearer ${this.tokenAvailable}`}}).then((response) => {\n                //   this.resetForm();\n                  \n                  console.log(response.data);\n              })\n          },\n        },\n        mounted(){\n            let tokenAvailable=window.localStorage.getItem('accessToken');\n            this.tokenAvailable = tokenAvailable;\n\n          },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.container {\n      max-width: 500px !important; \n      text-align: left;\n      margin: 0 auto;\n  }\n  label {\n      font-weight: 600;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}